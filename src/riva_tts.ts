// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.28.0
// source: riva/proto/riva_tts.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  ClientReadableStream,
  type ClientUnaryCall,
  handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { AudioEncoding, audioEncodingFromJSON, audioEncodingToJSON } from "./riva_audio";
import { RequestId } from "./riva_common";

export const protobufPackage = "nvidia.riva.tts";

export interface RivaSynthesisConfigRequest {
  /**
   * If model is specified only return config for model, otherwise return all
   * configs.
   */
  modelName: string;
}

export interface RivaSynthesisConfigResponse {
  modelConfig: RivaSynthesisConfigResponse_Config[];
}

export interface RivaSynthesisConfigResponse_Config {
  modelName: string;
  parameters: { [key: string]: string };
}

export interface RivaSynthesisConfigResponse_Config_ParametersEntry {
  key: string;
  value: string;
}

/** Required for Zero Shot model */
export interface ZeroShotData {
  /** Audio prompt for Zero Shot model. Duration should be between 3 to 10 seconds. */
  audioPrompt: Uint8Array;
  /** Sample rate for input audio prompt. */
  sampleRateHz: number;
  /** Encoding of audio prompt. Supported encodings are LINEAR_PCM and OGGOPUS. */
  encoding: AudioEncoding;
  /**
   * The number of times user wants to pass audio through decoder. This ranges
   * between 1-40. Defaults to 20.
   */
  quality: number;
}

export interface SynthesizeSpeechRequest {
  text: string;
  languageCode: string;
  /** audio encoding params */
  encoding: AudioEncoding;
  sampleRateHz: number;
  /** voice params */
  voiceName: string;
  /** Zero Shot model params */
  zeroShotData:
    | ZeroShotData
    | undefined;
  /**
   * A string containing comma-separated key-value pairs of
   * grapheme and corresponding phoneme separated by double spaces.
   */
  customDictionary: string;
  /**
   * The ID to be associated with the request. If provided, this will be
   * returned in the corresponding response.
   */
  id: RequestId | undefined;
}

export interface SynthesizeSpeechResponseMetadata {
  /**
   * Currently experimental API addition that returns the input text
   * after preprocessing has been completed as well as the predicted
   * duration for each token.
   * Note: this message is subject to future breaking changes, and potential
   * removal.
   */
  text: string;
  processedText: string;
  predictedDurations: number[];
}

export interface SynthesizeSpeechResponse {
  audio: Uint8Array;
  meta:
    | SynthesizeSpeechResponseMetadata
    | undefined;
  /** The ID associated with the request */
  id: RequestId | undefined;
}

function createBaseRivaSynthesisConfigRequest(): RivaSynthesisConfigRequest {
  return { modelName: "" };
}

export const RivaSynthesisConfigRequest = {
  encode(message: RivaSynthesisConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelName !== "") {
      writer.uint32(10).string(message.modelName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RivaSynthesisConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRivaSynthesisConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelName = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RivaSynthesisConfigRequest {
    return { modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "" };
  },

  toJSON(message: RivaSynthesisConfigRequest): unknown {
    const obj: any = {};
    if (message.modelName !== "") {
      obj.modelName = message.modelName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RivaSynthesisConfigRequest>, I>>(base?: I): RivaSynthesisConfigRequest {
    return RivaSynthesisConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RivaSynthesisConfigRequest>, I>>(object: I): RivaSynthesisConfigRequest {
    const message = createBaseRivaSynthesisConfigRequest();
    message.modelName = object.modelName ?? "";
    return message;
  },
};

function createBaseRivaSynthesisConfigResponse(): RivaSynthesisConfigResponse {
  return { modelConfig: [] };
}

export const RivaSynthesisConfigResponse = {
  encode(message: RivaSynthesisConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.modelConfig) {
      RivaSynthesisConfigResponse_Config.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RivaSynthesisConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRivaSynthesisConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelConfig.push(RivaSynthesisConfigResponse_Config.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RivaSynthesisConfigResponse {
    return {
      modelConfig: globalThis.Array.isArray(object?.modelConfig)
        ? object.modelConfig.map((e: any) => RivaSynthesisConfigResponse_Config.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RivaSynthesisConfigResponse): unknown {
    const obj: any = {};
    if (message.modelConfig?.length) {
      obj.modelConfig = message.modelConfig.map((e) => RivaSynthesisConfigResponse_Config.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RivaSynthesisConfigResponse>, I>>(base?: I): RivaSynthesisConfigResponse {
    return RivaSynthesisConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RivaSynthesisConfigResponse>, I>>(object: I): RivaSynthesisConfigResponse {
    const message = createBaseRivaSynthesisConfigResponse();
    message.modelConfig = object.modelConfig?.map((e) => RivaSynthesisConfigResponse_Config.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRivaSynthesisConfigResponse_Config(): RivaSynthesisConfigResponse_Config {
  return { modelName: "", parameters: {} };
}

export const RivaSynthesisConfigResponse_Config = {
  encode(message: RivaSynthesisConfigResponse_Config, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.modelName !== "") {
      writer.uint32(10).string(message.modelName);
    }
    Object.entries(message.parameters).forEach(([key, value]) => {
      RivaSynthesisConfigResponse_Config_ParametersEntry.encode({ key: key as any, value }, writer.uint32(18).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RivaSynthesisConfigResponse_Config {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRivaSynthesisConfigResponse_Config();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.modelName = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          const entry2 = RivaSynthesisConfigResponse_Config_ParametersEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.parameters[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RivaSynthesisConfigResponse_Config {
    return {
      modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "",
      parameters: isObject(object.parameters)
        ? Object.entries(object.parameters).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: RivaSynthesisConfigResponse_Config): unknown {
    const obj: any = {};
    if (message.modelName !== "") {
      obj.modelName = message.modelName;
    }
    if (message.parameters) {
      const entries = Object.entries(message.parameters);
      if (entries.length > 0) {
        obj.parameters = {};
        entries.forEach(([k, v]) => {
          obj.parameters[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RivaSynthesisConfigResponse_Config>, I>>(
    base?: I,
  ): RivaSynthesisConfigResponse_Config {
    return RivaSynthesisConfigResponse_Config.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RivaSynthesisConfigResponse_Config>, I>>(
    object: I,
  ): RivaSynthesisConfigResponse_Config {
    const message = createBaseRivaSynthesisConfigResponse_Config();
    message.modelName = object.modelName ?? "";
    message.parameters = Object.entries(object.parameters ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseRivaSynthesisConfigResponse_Config_ParametersEntry(): RivaSynthesisConfigResponse_Config_ParametersEntry {
  return { key: "", value: "" };
}

export const RivaSynthesisConfigResponse_Config_ParametersEntry = {
  encode(
    message: RivaSynthesisConfigResponse_Config_ParametersEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RivaSynthesisConfigResponse_Config_ParametersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRivaSynthesisConfigResponse_Config_ParametersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RivaSynthesisConfigResponse_Config_ParametersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: RivaSynthesisConfigResponse_Config_ParametersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RivaSynthesisConfigResponse_Config_ParametersEntry>, I>>(
    base?: I,
  ): RivaSynthesisConfigResponse_Config_ParametersEntry {
    return RivaSynthesisConfigResponse_Config_ParametersEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RivaSynthesisConfigResponse_Config_ParametersEntry>, I>>(
    object: I,
  ): RivaSynthesisConfigResponse_Config_ParametersEntry {
    const message = createBaseRivaSynthesisConfigResponse_Config_ParametersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseZeroShotData(): ZeroShotData {
  return { audioPrompt: new Uint8Array(0), sampleRateHz: 0, encoding: 0, quality: 0 };
}

export const ZeroShotData = {
  encode(message: ZeroShotData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.audioPrompt.length !== 0) {
      writer.uint32(10).bytes(message.audioPrompt);
    }
    if (message.sampleRateHz !== 0) {
      writer.uint32(16).int32(message.sampleRateHz);
    }
    if (message.encoding !== 0) {
      writer.uint32(24).int32(message.encoding);
    }
    if (message.quality !== 0) {
      writer.uint32(32).int32(message.quality);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ZeroShotData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseZeroShotData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.audioPrompt = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sampleRateHz = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.encoding = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.quality = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ZeroShotData {
    return {
      audioPrompt: isSet(object.audioPrompt) ? bytesFromBase64(object.audioPrompt) : new Uint8Array(0),
      sampleRateHz: isSet(object.sampleRateHz) ? globalThis.Number(object.sampleRateHz) : 0,
      encoding: isSet(object.encoding) ? audioEncodingFromJSON(object.encoding) : 0,
      quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
    };
  },

  toJSON(message: ZeroShotData): unknown {
    const obj: any = {};
    if (message.audioPrompt.length !== 0) {
      obj.audioPrompt = base64FromBytes(message.audioPrompt);
    }
    if (message.sampleRateHz !== 0) {
      obj.sampleRateHz = Math.round(message.sampleRateHz);
    }
    if (message.encoding !== 0) {
      obj.encoding = audioEncodingToJSON(message.encoding);
    }
    if (message.quality !== 0) {
      obj.quality = Math.round(message.quality);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ZeroShotData>, I>>(base?: I): ZeroShotData {
    return ZeroShotData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ZeroShotData>, I>>(object: I): ZeroShotData {
    const message = createBaseZeroShotData();
    message.audioPrompt = object.audioPrompt ?? new Uint8Array(0);
    message.sampleRateHz = object.sampleRateHz ?? 0;
    message.encoding = object.encoding ?? 0;
    message.quality = object.quality ?? 0;
    return message;
  },
};

function createBaseSynthesizeSpeechRequest(): SynthesizeSpeechRequest {
  return {
    text: "",
    languageCode: "",
    encoding: 0,
    sampleRateHz: 0,
    voiceName: "",
    zeroShotData: undefined,
    customDictionary: "",
    id: undefined,
  };
}

export const SynthesizeSpeechRequest = {
  encode(message: SynthesizeSpeechRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.languageCode !== "") {
      writer.uint32(18).string(message.languageCode);
    }
    if (message.encoding !== 0) {
      writer.uint32(24).int32(message.encoding);
    }
    if (message.sampleRateHz !== 0) {
      writer.uint32(32).int32(message.sampleRateHz);
    }
    if (message.voiceName !== "") {
      writer.uint32(42).string(message.voiceName);
    }
    if (message.zeroShotData !== undefined) {
      ZeroShotData.encode(message.zeroShotData, writer.uint32(50).fork()).join();
    }
    if (message.customDictionary !== "") {
      writer.uint32(58).string(message.customDictionary);
    }
    if (message.id !== undefined) {
      RequestId.encode(message.id, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynthesizeSpeechRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynthesizeSpeechRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.languageCode = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.encoding = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.sampleRateHz = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.voiceName = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.zeroShotData = ZeroShotData.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.customDictionary = reader.string();
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.id = RequestId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynthesizeSpeechRequest {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
      encoding: isSet(object.encoding) ? audioEncodingFromJSON(object.encoding) : 0,
      sampleRateHz: isSet(object.sampleRateHz) ? globalThis.Number(object.sampleRateHz) : 0,
      voiceName: isSet(object.voiceName) ? globalThis.String(object.voiceName) : "",
      zeroShotData: isSet(object.zeroShotData) ? ZeroShotData.fromJSON(object.zeroShotData) : undefined,
      customDictionary: isSet(object.customDictionary) ? globalThis.String(object.customDictionary) : "",
      id: isSet(object.id) ? RequestId.fromJSON(object.id) : undefined,
    };
  },

  toJSON(message: SynthesizeSpeechRequest): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.languageCode !== "") {
      obj.languageCode = message.languageCode;
    }
    if (message.encoding !== 0) {
      obj.encoding = audioEncodingToJSON(message.encoding);
    }
    if (message.sampleRateHz !== 0) {
      obj.sampleRateHz = Math.round(message.sampleRateHz);
    }
    if (message.voiceName !== "") {
      obj.voiceName = message.voiceName;
    }
    if (message.zeroShotData !== undefined) {
      obj.zeroShotData = ZeroShotData.toJSON(message.zeroShotData);
    }
    if (message.customDictionary !== "") {
      obj.customDictionary = message.customDictionary;
    }
    if (message.id !== undefined) {
      obj.id = RequestId.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SynthesizeSpeechRequest>, I>>(base?: I): SynthesizeSpeechRequest {
    return SynthesizeSpeechRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SynthesizeSpeechRequest>, I>>(object: I): SynthesizeSpeechRequest {
    const message = createBaseSynthesizeSpeechRequest();
    message.text = object.text ?? "";
    message.languageCode = object.languageCode ?? "";
    message.encoding = object.encoding ?? 0;
    message.sampleRateHz = object.sampleRateHz ?? 0;
    message.voiceName = object.voiceName ?? "";
    message.zeroShotData = (object.zeroShotData !== undefined && object.zeroShotData !== null)
      ? ZeroShotData.fromPartial(object.zeroShotData)
      : undefined;
    message.customDictionary = object.customDictionary ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? RequestId.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseSynthesizeSpeechResponseMetadata(): SynthesizeSpeechResponseMetadata {
  return { text: "", processedText: "", predictedDurations: [] };
}

export const SynthesizeSpeechResponseMetadata = {
  encode(message: SynthesizeSpeechResponseMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.processedText !== "") {
      writer.uint32(18).string(message.processedText);
    }
    writer.uint32(66).fork();
    for (const v of message.predictedDurations) {
      writer.float(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynthesizeSpeechResponseMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynthesizeSpeechResponseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.processedText = reader.string();
          continue;
        case 8:
          if (tag === 69) {
            message.predictedDurations.push(reader.float());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.predictedDurations.push(reader.float());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynthesizeSpeechResponseMetadata {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      processedText: isSet(object.processedText) ? globalThis.String(object.processedText) : "",
      predictedDurations: globalThis.Array.isArray(object?.predictedDurations)
        ? object.predictedDurations.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: SynthesizeSpeechResponseMetadata): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.processedText !== "") {
      obj.processedText = message.processedText;
    }
    if (message.predictedDurations?.length) {
      obj.predictedDurations = message.predictedDurations;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SynthesizeSpeechResponseMetadata>, I>>(
    base?: I,
  ): SynthesizeSpeechResponseMetadata {
    return SynthesizeSpeechResponseMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SynthesizeSpeechResponseMetadata>, I>>(
    object: I,
  ): SynthesizeSpeechResponseMetadata {
    const message = createBaseSynthesizeSpeechResponseMetadata();
    message.text = object.text ?? "";
    message.processedText = object.processedText ?? "";
    message.predictedDurations = object.predictedDurations?.map((e) => e) || [];
    return message;
  },
};

function createBaseSynthesizeSpeechResponse(): SynthesizeSpeechResponse {
  return { audio: new Uint8Array(0), meta: undefined, id: undefined };
}

export const SynthesizeSpeechResponse = {
  encode(message: SynthesizeSpeechResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.audio.length !== 0) {
      writer.uint32(10).bytes(message.audio);
    }
    if (message.meta !== undefined) {
      SynthesizeSpeechResponseMetadata.encode(message.meta, writer.uint32(18).fork()).join();
    }
    if (message.id !== undefined) {
      RequestId.encode(message.id, writer.uint32(802).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynthesizeSpeechResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynthesizeSpeechResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.audio = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.meta = SynthesizeSpeechResponseMetadata.decode(reader, reader.uint32());
          continue;
        case 100:
          if (tag !== 802) {
            break;
          }

          message.id = RequestId.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynthesizeSpeechResponse {
    return {
      audio: isSet(object.audio) ? bytesFromBase64(object.audio) : new Uint8Array(0),
      meta: isSet(object.meta) ? SynthesizeSpeechResponseMetadata.fromJSON(object.meta) : undefined,
      id: isSet(object.id) ? RequestId.fromJSON(object.id) : undefined,
    };
  },

  toJSON(message: SynthesizeSpeechResponse): unknown {
    const obj: any = {};
    if (message.audio.length !== 0) {
      obj.audio = base64FromBytes(message.audio);
    }
    if (message.meta !== undefined) {
      obj.meta = SynthesizeSpeechResponseMetadata.toJSON(message.meta);
    }
    if (message.id !== undefined) {
      obj.id = RequestId.toJSON(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SynthesizeSpeechResponse>, I>>(base?: I): SynthesizeSpeechResponse {
    return SynthesizeSpeechResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SynthesizeSpeechResponse>, I>>(object: I): SynthesizeSpeechResponse {
    const message = createBaseSynthesizeSpeechResponse();
    message.audio = object.audio ?? new Uint8Array(0);
    message.meta = (object.meta !== undefined && object.meta !== null)
      ? SynthesizeSpeechResponseMetadata.fromPartial(object.meta)
      : undefined;
    message.id = (object.id !== undefined && object.id !== null) ? RequestId.fromPartial(object.id) : undefined;
    return message;
  },
};

export type RivaSpeechSynthesisService = typeof RivaSpeechSynthesisService;
export const RivaSpeechSynthesisService = {
  /**
   * Used to request text-to-speech from the service. Submit a request
   * containing the desired text and configuration, and receive audio bytes in
   * the requested format.
   */
  synthesize: {
    path: "/nvidia.riva.tts.RivaSpeechSynthesis/Synthesize",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SynthesizeSpeechRequest) => Buffer.from(SynthesizeSpeechRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SynthesizeSpeechRequest.decode(value),
    responseSerialize: (value: SynthesizeSpeechResponse) =>
      Buffer.from(SynthesizeSpeechResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SynthesizeSpeechResponse.decode(value),
  },
  /**
   * Used to request text-to-speech returned via stream as it becomes available.
   * Submit a SynthesizeSpeechRequest with desired text and configuration,
   * and receive stream of bytes in the requested format.
   */
  synthesizeOnline: {
    path: "/nvidia.riva.tts.RivaSpeechSynthesis/SynthesizeOnline",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: SynthesizeSpeechRequest) => Buffer.from(SynthesizeSpeechRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SynthesizeSpeechRequest.decode(value),
    responseSerialize: (value: SynthesizeSpeechResponse) =>
      Buffer.from(SynthesizeSpeechResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SynthesizeSpeechResponse.decode(value),
  },
  /**
   * Enables clients to request the configuration of the current Synthesize
   * service, or a specific model within the service.
   */
  getRivaSynthesisConfig: {
    path: "/nvidia.riva.tts.RivaSpeechSynthesis/GetRivaSynthesisConfig",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RivaSynthesisConfigRequest) =>
      Buffer.from(RivaSynthesisConfigRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RivaSynthesisConfigRequest.decode(value),
    responseSerialize: (value: RivaSynthesisConfigResponse) =>
      Buffer.from(RivaSynthesisConfigResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RivaSynthesisConfigResponse.decode(value),
  },
} as const;

export interface RivaSpeechSynthesisServer extends UntypedServiceImplementation {
  /**
   * Used to request text-to-speech from the service. Submit a request
   * containing the desired text and configuration, and receive audio bytes in
   * the requested format.
   */
  synthesize: handleUnaryCall<SynthesizeSpeechRequest, SynthesizeSpeechResponse>;
  /**
   * Used to request text-to-speech returned via stream as it becomes available.
   * Submit a SynthesizeSpeechRequest with desired text and configuration,
   * and receive stream of bytes in the requested format.
   */
  synthesizeOnline: handleServerStreamingCall<SynthesizeSpeechRequest, SynthesizeSpeechResponse>;
  /**
   * Enables clients to request the configuration of the current Synthesize
   * service, or a specific model within the service.
   */
  getRivaSynthesisConfig: handleUnaryCall<RivaSynthesisConfigRequest, RivaSynthesisConfigResponse>;
}

export interface RivaSpeechSynthesisClient extends Client {
  /**
   * Used to request text-to-speech from the service. Submit a request
   * containing the desired text and configuration, and receive audio bytes in
   * the requested format.
   */
  synthesize(
    request: SynthesizeSpeechRequest,
    callback: (error: ServiceError | null, response: SynthesizeSpeechResponse) => void,
  ): ClientUnaryCall;
  synthesize(
    request: SynthesizeSpeechRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SynthesizeSpeechResponse) => void,
  ): ClientUnaryCall;
  synthesize(
    request: SynthesizeSpeechRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SynthesizeSpeechResponse) => void,
  ): ClientUnaryCall;
  /**
   * Used to request text-to-speech returned via stream as it becomes available.
   * Submit a SynthesizeSpeechRequest with desired text and configuration,
   * and receive stream of bytes in the requested format.
   */
  synthesizeOnline(
    request: SynthesizeSpeechRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<SynthesizeSpeechResponse>;
  synthesizeOnline(
    request: SynthesizeSpeechRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<SynthesizeSpeechResponse>;
  /**
   * Enables clients to request the configuration of the current Synthesize
   * service, or a specific model within the service.
   */
  getRivaSynthesisConfig(
    request: RivaSynthesisConfigRequest,
    callback: (error: ServiceError | null, response: RivaSynthesisConfigResponse) => void,
  ): ClientUnaryCall;
  getRivaSynthesisConfig(
    request: RivaSynthesisConfigRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RivaSynthesisConfigResponse) => void,
  ): ClientUnaryCall;
  getRivaSynthesisConfig(
    request: RivaSynthesisConfigRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RivaSynthesisConfigResponse) => void,
  ): ClientUnaryCall;
}

export const RivaSpeechSynthesisClient = makeGenericClientConstructor(
  RivaSpeechSynthesisService,
  "nvidia.riva.tts.RivaSpeechSynthesis",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): RivaSpeechSynthesisClient;
  service: typeof RivaSpeechSynthesisService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
