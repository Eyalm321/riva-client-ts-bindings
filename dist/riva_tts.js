"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.28.0
// source: riva/proto/riva_tts.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.RivaSpeechSynthesisClient = exports.RivaSpeechSynthesisService = exports.SynthesizeSpeechResponse = exports.SynthesizeSpeechResponseMetadata = exports.SynthesizeSpeechRequest = exports.ZeroShotData = exports.RivaSynthesisConfigResponse_Config_ParametersEntry = exports.RivaSynthesisConfigResponse_Config = exports.RivaSynthesisConfigResponse = exports.RivaSynthesisConfigRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
const riva_audio_1 = require("./riva_audio");
const riva_common_1 = require("./riva_common");
exports.protobufPackage = "nvidia.riva.tts";
function createBaseRivaSynthesisConfigRequest() {
    return { modelName: "" };
}
exports.RivaSynthesisConfigRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.modelName !== "") {
            writer.uint32(10).string(message.modelName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRivaSynthesisConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.modelName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.modelName !== "") {
            obj.modelName = message.modelName;
        }
        return obj;
    },
    create(base) {
        return exports.RivaSynthesisConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRivaSynthesisConfigRequest();
        message.modelName = (_a = object.modelName) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRivaSynthesisConfigResponse() {
    return { modelConfig: [] };
}
exports.RivaSynthesisConfigResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.modelConfig) {
            exports.RivaSynthesisConfigResponse_Config.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRivaSynthesisConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.modelConfig.push(exports.RivaSynthesisConfigResponse_Config.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            modelConfig: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.modelConfig)
                ? object.modelConfig.map((e) => exports.RivaSynthesisConfigResponse_Config.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.modelConfig) === null || _a === void 0 ? void 0 : _a.length) {
            obj.modelConfig = message.modelConfig.map((e) => exports.RivaSynthesisConfigResponse_Config.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.RivaSynthesisConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRivaSynthesisConfigResponse();
        message.modelConfig = ((_a = object.modelConfig) === null || _a === void 0 ? void 0 : _a.map((e) => exports.RivaSynthesisConfigResponse_Config.fromPartial(e))) || [];
        return message;
    },
};
function createBaseRivaSynthesisConfigResponse_Config() {
    return { modelName: "", parameters: {} };
}
exports.RivaSynthesisConfigResponse_Config = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.modelName !== "") {
            writer.uint32(10).string(message.modelName);
        }
        Object.entries(message.parameters).forEach(([key, value]) => {
            exports.RivaSynthesisConfigResponse_Config_ParametersEntry.encode({ key: key, value }, writer.uint32(18).fork())
                .join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRivaSynthesisConfigResponse_Config();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.modelName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.RivaSynthesisConfigResponse_Config_ParametersEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.parameters[entry2.key] = entry2.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "",
            parameters: isObject(object.parameters)
                ? Object.entries(object.parameters).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.modelName !== "") {
            obj.modelName = message.modelName;
        }
        if (message.parameters) {
            const entries = Object.entries(message.parameters);
            if (entries.length > 0) {
                obj.parameters = {};
                entries.forEach(([k, v]) => {
                    obj.parameters[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.RivaSynthesisConfigResponse_Config.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRivaSynthesisConfigResponse_Config();
        message.modelName = (_a = object.modelName) !== null && _a !== void 0 ? _a : "";
        message.parameters = Object.entries((_b = object.parameters) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseRivaSynthesisConfigResponse_Config_ParametersEntry() {
    return { key: "", value: "" };
}
exports.RivaSynthesisConfigResponse_Config_ParametersEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRivaSynthesisConfigResponse_Config_ParametersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.RivaSynthesisConfigResponse_Config_ParametersEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRivaSynthesisConfigResponse_Config_ParametersEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseZeroShotData() {
    return { audioPrompt: new Uint8Array(0), sampleRateHz: 0, encoding: 0, quality: 0 };
}
exports.ZeroShotData = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.audioPrompt.length !== 0) {
            writer.uint32(10).bytes(message.audioPrompt);
        }
        if (message.sampleRateHz !== 0) {
            writer.uint32(16).int32(message.sampleRateHz);
        }
        if (message.encoding !== 0) {
            writer.uint32(24).int32(message.encoding);
        }
        if (message.quality !== 0) {
            writer.uint32(32).int32(message.quality);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseZeroShotData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.audioPrompt = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.sampleRateHz = reader.int32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.encoding = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.quality = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            audioPrompt: isSet(object.audioPrompt) ? bytesFromBase64(object.audioPrompt) : new Uint8Array(0),
            sampleRateHz: isSet(object.sampleRateHz) ? globalThis.Number(object.sampleRateHz) : 0,
            encoding: isSet(object.encoding) ? (0, riva_audio_1.audioEncodingFromJSON)(object.encoding) : 0,
            quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.audioPrompt.length !== 0) {
            obj.audioPrompt = base64FromBytes(message.audioPrompt);
        }
        if (message.sampleRateHz !== 0) {
            obj.sampleRateHz = Math.round(message.sampleRateHz);
        }
        if (message.encoding !== 0) {
            obj.encoding = (0, riva_audio_1.audioEncodingToJSON)(message.encoding);
        }
        if (message.quality !== 0) {
            obj.quality = Math.round(message.quality);
        }
        return obj;
    },
    create(base) {
        return exports.ZeroShotData.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseZeroShotData();
        message.audioPrompt = (_a = object.audioPrompt) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.sampleRateHz = (_b = object.sampleRateHz) !== null && _b !== void 0 ? _b : 0;
        message.encoding = (_c = object.encoding) !== null && _c !== void 0 ? _c : 0;
        message.quality = (_d = object.quality) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseSynthesizeSpeechRequest() {
    return {
        text: "",
        languageCode: "",
        encoding: 0,
        sampleRateHz: 0,
        voiceName: "",
        zeroShotData: undefined,
        customDictionary: "",
        id: undefined,
    };
}
exports.SynthesizeSpeechRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.text !== "") {
            writer.uint32(10).string(message.text);
        }
        if (message.languageCode !== "") {
            writer.uint32(18).string(message.languageCode);
        }
        if (message.encoding !== 0) {
            writer.uint32(24).int32(message.encoding);
        }
        if (message.sampleRateHz !== 0) {
            writer.uint32(32).int32(message.sampleRateHz);
        }
        if (message.voiceName !== "") {
            writer.uint32(42).string(message.voiceName);
        }
        if (message.zeroShotData !== undefined) {
            exports.ZeroShotData.encode(message.zeroShotData, writer.uint32(50).fork()).join();
        }
        if (message.customDictionary !== "") {
            writer.uint32(58).string(message.customDictionary);
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSynthesizeSpeechRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.languageCode = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.encoding = reader.int32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.sampleRateHz = reader.int32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.voiceName = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.zeroShotData = exports.ZeroShotData.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.customDictionary = reader.string();
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
            encoding: isSet(object.encoding) ? (0, riva_audio_1.audioEncodingFromJSON)(object.encoding) : 0,
            sampleRateHz: isSet(object.sampleRateHz) ? globalThis.Number(object.sampleRateHz) : 0,
            voiceName: isSet(object.voiceName) ? globalThis.String(object.voiceName) : "",
            zeroShotData: isSet(object.zeroShotData) ? exports.ZeroShotData.fromJSON(object.zeroShotData) : undefined,
            customDictionary: isSet(object.customDictionary) ? globalThis.String(object.customDictionary) : "",
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.languageCode !== "") {
            obj.languageCode = message.languageCode;
        }
        if (message.encoding !== 0) {
            obj.encoding = (0, riva_audio_1.audioEncodingToJSON)(message.encoding);
        }
        if (message.sampleRateHz !== 0) {
            obj.sampleRateHz = Math.round(message.sampleRateHz);
        }
        if (message.voiceName !== "") {
            obj.voiceName = message.voiceName;
        }
        if (message.zeroShotData !== undefined) {
            obj.zeroShotData = exports.ZeroShotData.toJSON(message.zeroShotData);
        }
        if (message.customDictionary !== "") {
            obj.customDictionary = message.customDictionary;
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.SynthesizeSpeechRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseSynthesizeSpeechRequest();
        message.text = (_a = object.text) !== null && _a !== void 0 ? _a : "";
        message.languageCode = (_b = object.languageCode) !== null && _b !== void 0 ? _b : "";
        message.encoding = (_c = object.encoding) !== null && _c !== void 0 ? _c : 0;
        message.sampleRateHz = (_d = object.sampleRateHz) !== null && _d !== void 0 ? _d : 0;
        message.voiceName = (_e = object.voiceName) !== null && _e !== void 0 ? _e : "";
        message.zeroShotData = (object.zeroShotData !== undefined && object.zeroShotData !== null)
            ? exports.ZeroShotData.fromPartial(object.zeroShotData)
            : undefined;
        message.customDictionary = (_f = object.customDictionary) !== null && _f !== void 0 ? _f : "";
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseSynthesizeSpeechResponseMetadata() {
    return { text: "", processedText: "", predictedDurations: [] };
}
exports.SynthesizeSpeechResponseMetadata = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.text !== "") {
            writer.uint32(10).string(message.text);
        }
        if (message.processedText !== "") {
            writer.uint32(18).string(message.processedText);
        }
        writer.uint32(66).fork();
        for (const v of message.predictedDurations) {
            writer.float(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSynthesizeSpeechResponseMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.processedText = reader.string();
                    continue;
                case 8:
                    if (tag === 69) {
                        message.predictedDurations.push(reader.float());
                        continue;
                    }
                    if (tag === 66) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.predictedDurations.push(reader.float());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            text: isSet(object.text) ? globalThis.String(object.text) : "",
            processedText: isSet(object.processedText) ? globalThis.String(object.processedText) : "",
            predictedDurations: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.predictedDurations)
                ? object.predictedDurations.map((e) => globalThis.Number(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.text !== "") {
            obj.text = message.text;
        }
        if (message.processedText !== "") {
            obj.processedText = message.processedText;
        }
        if ((_a = message.predictedDurations) === null || _a === void 0 ? void 0 : _a.length) {
            obj.predictedDurations = message.predictedDurations;
        }
        return obj;
    },
    create(base) {
        return exports.SynthesizeSpeechResponseMetadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSynthesizeSpeechResponseMetadata();
        message.text = (_a = object.text) !== null && _a !== void 0 ? _a : "";
        message.processedText = (_b = object.processedText) !== null && _b !== void 0 ? _b : "";
        message.predictedDurations = ((_c = object.predictedDurations) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        return message;
    },
};
function createBaseSynthesizeSpeechResponse() {
    return { audio: new Uint8Array(0), meta: undefined, id: undefined };
}
exports.SynthesizeSpeechResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.audio.length !== 0) {
            writer.uint32(10).bytes(message.audio);
        }
        if (message.meta !== undefined) {
            exports.SynthesizeSpeechResponseMetadata.encode(message.meta, writer.uint32(18).fork()).join();
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSynthesizeSpeechResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.audio = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.meta = exports.SynthesizeSpeechResponseMetadata.decode(reader, reader.uint32());
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            audio: isSet(object.audio) ? bytesFromBase64(object.audio) : new Uint8Array(0),
            meta: isSet(object.meta) ? exports.SynthesizeSpeechResponseMetadata.fromJSON(object.meta) : undefined,
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.audio.length !== 0) {
            obj.audio = base64FromBytes(message.audio);
        }
        if (message.meta !== undefined) {
            obj.meta = exports.SynthesizeSpeechResponseMetadata.toJSON(message.meta);
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.SynthesizeSpeechResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSynthesizeSpeechResponse();
        message.audio = (_a = object.audio) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.meta = (object.meta !== undefined && object.meta !== null)
            ? exports.SynthesizeSpeechResponseMetadata.fromPartial(object.meta)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
exports.RivaSpeechSynthesisService = {
    /**
     * Used to request text-to-speech from the service. Submit a request
     * containing the desired text and configuration, and receive audio bytes in
     * the requested format.
     */
    synthesize: {
        path: "/nvidia.riva.tts.RivaSpeechSynthesis/Synthesize",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.SynthesizeSpeechRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.SynthesizeSpeechRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.SynthesizeSpeechResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.SynthesizeSpeechResponse.decode(value),
    },
    /**
     * Used to request text-to-speech returned via stream as it becomes available.
     * Submit a SynthesizeSpeechRequest with desired text and configuration,
     * and receive stream of bytes in the requested format.
     */
    synthesizeOnline: {
        path: "/nvidia.riva.tts.RivaSpeechSynthesis/SynthesizeOnline",
        requestStream: false,
        responseStream: true,
        requestSerialize: (value) => Buffer.from(exports.SynthesizeSpeechRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.SynthesizeSpeechRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.SynthesizeSpeechResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.SynthesizeSpeechResponse.decode(value),
    },
    /**
     * Enables clients to request the configuration of the current Synthesize
     * service, or a specific model within the service.
     */
    getRivaSynthesisConfig: {
        path: "/nvidia.riva.tts.RivaSpeechSynthesis/GetRivaSynthesisConfig",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.RivaSynthesisConfigRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.RivaSynthesisConfigRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.RivaSynthesisConfigResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.RivaSynthesisConfigResponse.decode(value),
    },
};
exports.RivaSpeechSynthesisClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.RivaSpeechSynthesisService, "nvidia.riva.tts.RivaSpeechSynthesis");
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
