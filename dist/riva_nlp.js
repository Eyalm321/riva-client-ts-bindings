"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.28.0
// source: riva/proto/riva_nlp.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.RivaLanguageUnderstandingClient = exports.RivaLanguageUnderstandingService = exports.NaturalQueryResponse = exports.NaturalQueryResult = exports.NaturalQueryRequest = exports.AnalyzeEntitiesRequest = exports.AnalyzeEntitiesOptions = exports.AnalyzeIntentResponse = exports.AnalyzeIntentRequest = exports.AnalyzeIntentOptions = exports.AnalyzeIntentContext = exports.TokenClassResponse = exports.TokenClassSequence = exports.TokenClassValue = exports.TokenClassRequest = exports.TextClassResponse = exports.ClassificationResult = exports.Span = exports.Classification = exports.TextClassRequest = exports.TextTransformResponse = exports.TextTransformRequest = exports.NLPModelParams = exports.RivaNLPConfigResponse_Config_ParametersEntry = exports.RivaNLPConfigResponse_Config = exports.RivaNLPConfigResponse = exports.RivaNLPConfigRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
const riva_common_1 = require("./riva_common");
exports.protobufPackage = "nvidia.riva.nlp";
function createBaseRivaNLPConfigRequest() {
    return { modelName: "" };
}
exports.RivaNLPConfigRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.modelName !== "") {
            writer.uint32(10).string(message.modelName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRivaNLPConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.modelName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.modelName !== "") {
            obj.modelName = message.modelName;
        }
        return obj;
    },
    create(base) {
        return exports.RivaNLPConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRivaNLPConfigRequest();
        message.modelName = (_a = object.modelName) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRivaNLPConfigResponse() {
    return { modelConfig: [] };
}
exports.RivaNLPConfigResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.modelConfig) {
            exports.RivaNLPConfigResponse_Config.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRivaNLPConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.modelConfig.push(exports.RivaNLPConfigResponse_Config.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            modelConfig: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.modelConfig)
                ? object.modelConfig.map((e) => exports.RivaNLPConfigResponse_Config.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.modelConfig) === null || _a === void 0 ? void 0 : _a.length) {
            obj.modelConfig = message.modelConfig.map((e) => exports.RivaNLPConfigResponse_Config.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.RivaNLPConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRivaNLPConfigResponse();
        message.modelConfig = ((_a = object.modelConfig) === null || _a === void 0 ? void 0 : _a.map((e) => exports.RivaNLPConfigResponse_Config.fromPartial(e))) || [];
        return message;
    },
};
function createBaseRivaNLPConfigResponse_Config() {
    return { modelName: "", parameters: {} };
}
exports.RivaNLPConfigResponse_Config = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.modelName !== "") {
            writer.uint32(10).string(message.modelName);
        }
        Object.entries(message.parameters).forEach(([key, value]) => {
            exports.RivaNLPConfigResponse_Config_ParametersEntry.encode({ key: key, value }, writer.uint32(18).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRivaNLPConfigResponse_Config();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.modelName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.RivaNLPConfigResponse_Config_ParametersEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.parameters[entry2.key] = entry2.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "",
            parameters: isObject(object.parameters)
                ? Object.entries(object.parameters).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.modelName !== "") {
            obj.modelName = message.modelName;
        }
        if (message.parameters) {
            const entries = Object.entries(message.parameters);
            if (entries.length > 0) {
                obj.parameters = {};
                entries.forEach(([k, v]) => {
                    obj.parameters[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.RivaNLPConfigResponse_Config.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRivaNLPConfigResponse_Config();
        message.modelName = (_a = object.modelName) !== null && _a !== void 0 ? _a : "";
        message.parameters = Object.entries((_b = object.parameters) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseRivaNLPConfigResponse_Config_ParametersEntry() {
    return { key: "", value: "" };
}
exports.RivaNLPConfigResponse_Config_ParametersEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRivaNLPConfigResponse_Config_ParametersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.RivaNLPConfigResponse_Config_ParametersEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRivaNLPConfigResponse_Config_ParametersEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseNLPModelParams() {
    return { modelName: "", languageCode: "" };
}
exports.NLPModelParams = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.modelName !== "") {
            writer.uint32(10).string(message.modelName);
        }
        if (message.languageCode !== "") {
            writer.uint32(26).string(message.languageCode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNLPModelParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.modelName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.languageCode = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "",
            languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.modelName !== "") {
            obj.modelName = message.modelName;
        }
        if (message.languageCode !== "") {
            obj.languageCode = message.languageCode;
        }
        return obj;
    },
    create(base) {
        return exports.NLPModelParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseNLPModelParams();
        message.modelName = (_a = object.modelName) !== null && _a !== void 0 ? _a : "";
        message.languageCode = (_b = object.languageCode) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseTextTransformRequest() {
    return { text: [], topN: 0, model: undefined, id: undefined };
}
exports.TextTransformRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.text) {
            writer.uint32(10).string(v);
        }
        if (message.topN !== 0) {
            writer.uint32(16).uint32(message.topN);
        }
        if (message.model !== undefined) {
            exports.NLPModelParams.encode(message.model, writer.uint32(26).fork()).join();
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTextTransformRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.text.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.topN = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.model = exports.NLPModelParams.decode(reader, reader.uint32());
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            text: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.text) ? object.text.map((e) => globalThis.String(e)) : [],
            topN: isSet(object.topN) ? globalThis.Number(object.topN) : 0,
            model: isSet(object.model) ? exports.NLPModelParams.fromJSON(object.model) : undefined,
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.text) === null || _a === void 0 ? void 0 : _a.length) {
            obj.text = message.text;
        }
        if (message.topN !== 0) {
            obj.topN = Math.round(message.topN);
        }
        if (message.model !== undefined) {
            obj.model = exports.NLPModelParams.toJSON(message.model);
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.TextTransformRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTextTransformRequest();
        message.text = ((_a = object.text) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.topN = (_b = object.topN) !== null && _b !== void 0 ? _b : 0;
        message.model = (object.model !== undefined && object.model !== null)
            ? exports.NLPModelParams.fromPartial(object.model)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseTextTransformResponse() {
    return { text: [], id: undefined };
}
exports.TextTransformResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.text) {
            writer.uint32(10).string(v);
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTextTransformResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.text.push(reader.string());
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            text: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.text) ? object.text.map((e) => globalThis.String(e)) : [],
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.text) === null || _a === void 0 ? void 0 : _a.length) {
            obj.text = message.text;
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.TextTransformResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTextTransformResponse();
        message.text = ((_a = object.text) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseTextClassRequest() {
    return { text: [], topN: 0, model: undefined, id: undefined };
}
exports.TextClassRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.text) {
            writer.uint32(10).string(v);
        }
        if (message.topN !== 0) {
            writer.uint32(16).uint32(message.topN);
        }
        if (message.model !== undefined) {
            exports.NLPModelParams.encode(message.model, writer.uint32(26).fork()).join();
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTextClassRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.text.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.topN = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.model = exports.NLPModelParams.decode(reader, reader.uint32());
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            text: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.text) ? object.text.map((e) => globalThis.String(e)) : [],
            topN: isSet(object.topN) ? globalThis.Number(object.topN) : 0,
            model: isSet(object.model) ? exports.NLPModelParams.fromJSON(object.model) : undefined,
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.text) === null || _a === void 0 ? void 0 : _a.length) {
            obj.text = message.text;
        }
        if (message.topN !== 0) {
            obj.topN = Math.round(message.topN);
        }
        if (message.model !== undefined) {
            obj.model = exports.NLPModelParams.toJSON(message.model);
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.TextClassRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTextClassRequest();
        message.text = ((_a = object.text) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.topN = (_b = object.topN) !== null && _b !== void 0 ? _b : 0;
        message.model = (object.model !== undefined && object.model !== null)
            ? exports.NLPModelParams.fromPartial(object.model)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseClassification() {
    return { className: "", score: 0 };
}
exports.Classification = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.className !== "") {
            writer.uint32(10).string(message.className);
        }
        if (message.score !== 0) {
            writer.uint32(21).float(message.score);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClassification();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.className = reader.string();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.score = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            className: isSet(object.className) ? globalThis.String(object.className) : "",
            score: isSet(object.score) ? globalThis.Number(object.score) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.className !== "") {
            obj.className = message.className;
        }
        if (message.score !== 0) {
            obj.score = message.score;
        }
        return obj;
    },
    create(base) {
        return exports.Classification.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseClassification();
        message.className = (_a = object.className) !== null && _a !== void 0 ? _a : "";
        message.score = (_b = object.score) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseSpan() {
    return { start: 0, end: 0 };
}
exports.Span = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.start !== 0) {
            writer.uint32(8).uint32(message.start);
        }
        if (message.end !== 0) {
            writer.uint32(16).uint32(message.end);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSpan();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.start = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.end = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            start: isSet(object.start) ? globalThis.Number(object.start) : 0,
            end: isSet(object.end) ? globalThis.Number(object.end) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.start !== 0) {
            obj.start = Math.round(message.start);
        }
        if (message.end !== 0) {
            obj.end = Math.round(message.end);
        }
        return obj;
    },
    create(base) {
        return exports.Span.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSpan();
        message.start = (_a = object.start) !== null && _a !== void 0 ? _a : 0;
        message.end = (_b = object.end) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseClassificationResult() {
    return { labels: [] };
}
exports.ClassificationResult = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.labels) {
            exports.Classification.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseClassificationResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.labels.push(exports.Classification.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            labels: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.labels) ? object.labels.map((e) => exports.Classification.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.labels) === null || _a === void 0 ? void 0 : _a.length) {
            obj.labels = message.labels.map((e) => exports.Classification.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.ClassificationResult.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseClassificationResult();
        message.labels = ((_a = object.labels) === null || _a === void 0 ? void 0 : _a.map((e) => exports.Classification.fromPartial(e))) || [];
        return message;
    },
};
function createBaseTextClassResponse() {
    return { results: [], id: undefined };
}
exports.TextClassResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.results) {
            exports.ClassificationResult.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTextClassResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.results.push(exports.ClassificationResult.decode(reader, reader.uint32()));
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            results: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.results)
                ? object.results.map((e) => exports.ClassificationResult.fromJSON(e))
                : [],
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.results) === null || _a === void 0 ? void 0 : _a.length) {
            obj.results = message.results.map((e) => exports.ClassificationResult.toJSON(e));
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.TextClassResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTextClassResponse();
        message.results = ((_a = object.results) === null || _a === void 0 ? void 0 : _a.map((e) => exports.ClassificationResult.fromPartial(e))) || [];
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseTokenClassRequest() {
    return { text: [], topN: 0, model: undefined, id: undefined };
}
exports.TokenClassRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.text) {
            writer.uint32(10).string(v);
        }
        if (message.topN !== 0) {
            writer.uint32(24).uint32(message.topN);
        }
        if (message.model !== undefined) {
            exports.NLPModelParams.encode(message.model, writer.uint32(34).fork()).join();
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTokenClassRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.text.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.topN = reader.uint32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.model = exports.NLPModelParams.decode(reader, reader.uint32());
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            text: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.text) ? object.text.map((e) => globalThis.String(e)) : [],
            topN: isSet(object.topN) ? globalThis.Number(object.topN) : 0,
            model: isSet(object.model) ? exports.NLPModelParams.fromJSON(object.model) : undefined,
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.text) === null || _a === void 0 ? void 0 : _a.length) {
            obj.text = message.text;
        }
        if (message.topN !== 0) {
            obj.topN = Math.round(message.topN);
        }
        if (message.model !== undefined) {
            obj.model = exports.NLPModelParams.toJSON(message.model);
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.TokenClassRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseTokenClassRequest();
        message.text = ((_a = object.text) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.topN = (_b = object.topN) !== null && _b !== void 0 ? _b : 0;
        message.model = (object.model !== undefined && object.model !== null)
            ? exports.NLPModelParams.fromPartial(object.model)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseTokenClassValue() {
    return { token: "", label: [], span: [] };
}
exports.TokenClassValue = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        for (const v of message.label) {
            exports.Classification.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.span) {
            exports.Span.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTokenClassValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.token = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.label.push(exports.Classification.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.span.push(exports.Span.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            token: isSet(object.token) ? globalThis.String(object.token) : "",
            label: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.label) ? object.label.map((e) => exports.Classification.fromJSON(e)) : [],
            span: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.span) ? object.span.map((e) => exports.Span.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.token !== "") {
            obj.token = message.token;
        }
        if ((_a = message.label) === null || _a === void 0 ? void 0 : _a.length) {
            obj.label = message.label.map((e) => exports.Classification.toJSON(e));
        }
        if ((_b = message.span) === null || _b === void 0 ? void 0 : _b.length) {
            obj.span = message.span.map((e) => exports.Span.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.TokenClassValue.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTokenClassValue();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        message.label = ((_b = object.label) === null || _b === void 0 ? void 0 : _b.map((e) => exports.Classification.fromPartial(e))) || [];
        message.span = ((_c = object.span) === null || _c === void 0 ? void 0 : _c.map((e) => exports.Span.fromPartial(e))) || [];
        return message;
    },
};
function createBaseTokenClassSequence() {
    return { results: [] };
}
exports.TokenClassSequence = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.results) {
            exports.TokenClassValue.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTokenClassSequence();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.results.push(exports.TokenClassValue.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            results: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.results)
                ? object.results.map((e) => exports.TokenClassValue.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.results) === null || _a === void 0 ? void 0 : _a.length) {
            obj.results = message.results.map((e) => exports.TokenClassValue.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.TokenClassSequence.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTokenClassSequence();
        message.results = ((_a = object.results) === null || _a === void 0 ? void 0 : _a.map((e) => exports.TokenClassValue.fromPartial(e))) || [];
        return message;
    },
};
function createBaseTokenClassResponse() {
    return { results: [], id: undefined };
}
exports.TokenClassResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.results) {
            exports.TokenClassSequence.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTokenClassResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.results.push(exports.TokenClassSequence.decode(reader, reader.uint32()));
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            results: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.results)
                ? object.results.map((e) => exports.TokenClassSequence.fromJSON(e))
                : [],
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.results) === null || _a === void 0 ? void 0 : _a.length) {
            obj.results = message.results.map((e) => exports.TokenClassSequence.toJSON(e));
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.TokenClassResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseTokenClassResponse();
        message.results = ((_a = object.results) === null || _a === void 0 ? void 0 : _a.map((e) => exports.TokenClassSequence.fromPartial(e))) || [];
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseAnalyzeIntentContext() {
    return {};
}
exports.AnalyzeIntentContext = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAnalyzeIntentContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.AnalyzeIntentContext.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseAnalyzeIntentContext();
        return message;
    },
};
function createBaseAnalyzeIntentOptions() {
    return { previousIntent: undefined, vectors: undefined, domain: "", lang: "" };
}
exports.AnalyzeIntentOptions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.previousIntent !== undefined) {
            writer.uint32(10).string(message.previousIntent);
        }
        if (message.vectors !== undefined) {
            exports.AnalyzeIntentContext.encode(message.vectors, writer.uint32(18).fork()).join();
        }
        if (message.domain !== "") {
            writer.uint32(26).string(message.domain);
        }
        if (message.lang !== "") {
            writer.uint32(34).string(message.lang);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAnalyzeIntentOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.previousIntent = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.vectors = exports.AnalyzeIntentContext.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.lang = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            previousIntent: isSet(object.previousIntent) ? globalThis.String(object.previousIntent) : undefined,
            vectors: isSet(object.vectors) ? exports.AnalyzeIntentContext.fromJSON(object.vectors) : undefined,
            domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
            lang: isSet(object.lang) ? globalThis.String(object.lang) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.previousIntent !== undefined) {
            obj.previousIntent = message.previousIntent;
        }
        if (message.vectors !== undefined) {
            obj.vectors = exports.AnalyzeIntentContext.toJSON(message.vectors);
        }
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        if (message.lang !== "") {
            obj.lang = message.lang;
        }
        return obj;
    },
    create(base) {
        return exports.AnalyzeIntentOptions.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAnalyzeIntentOptions();
        message.previousIntent = (_a = object.previousIntent) !== null && _a !== void 0 ? _a : undefined;
        message.vectors = (object.vectors !== undefined && object.vectors !== null)
            ? exports.AnalyzeIntentContext.fromPartial(object.vectors)
            : undefined;
        message.domain = (_b = object.domain) !== null && _b !== void 0 ? _b : "";
        message.lang = (_c = object.lang) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseAnalyzeIntentRequest() {
    return { query: "", options: undefined, id: undefined };
}
exports.AnalyzeIntentRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== "") {
            writer.uint32(10).string(message.query);
        }
        if (message.options !== undefined) {
            exports.AnalyzeIntentOptions.encode(message.options, writer.uint32(18).fork()).join();
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAnalyzeIntentRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.options = exports.AnalyzeIntentOptions.decode(reader, reader.uint32());
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? globalThis.String(object.query) : "",
            options: isSet(object.options) ? exports.AnalyzeIntentOptions.fromJSON(object.options) : undefined,
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== "") {
            obj.query = message.query;
        }
        if (message.options !== undefined) {
            obj.options = exports.AnalyzeIntentOptions.toJSON(message.options);
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.AnalyzeIntentRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAnalyzeIntentRequest();
        message.query = (_a = object.query) !== null && _a !== void 0 ? _a : "";
        message.options = (object.options !== undefined && object.options !== null)
            ? exports.AnalyzeIntentOptions.fromPartial(object.options)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseAnalyzeIntentResponse() {
    return { intent: undefined, slots: [], domainStr: "", domain: undefined, id: undefined };
}
exports.AnalyzeIntentResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.intent !== undefined) {
            exports.Classification.encode(message.intent, writer.uint32(10).fork()).join();
        }
        for (const v of message.slots) {
            exports.TokenClassValue.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.domainStr !== "") {
            writer.uint32(26).string(message.domainStr);
        }
        if (message.domain !== undefined) {
            exports.Classification.encode(message.domain, writer.uint32(34).fork()).join();
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAnalyzeIntentResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.intent = exports.Classification.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.slots.push(exports.TokenClassValue.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.domainStr = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.domain = exports.Classification.decode(reader, reader.uint32());
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            intent: isSet(object.intent) ? exports.Classification.fromJSON(object.intent) : undefined,
            slots: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.slots) ? object.slots.map((e) => exports.TokenClassValue.fromJSON(e)) : [],
            domainStr: isSet(object.domainStr) ? globalThis.String(object.domainStr) : "",
            domain: isSet(object.domain) ? exports.Classification.fromJSON(object.domain) : undefined,
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.intent !== undefined) {
            obj.intent = exports.Classification.toJSON(message.intent);
        }
        if ((_a = message.slots) === null || _a === void 0 ? void 0 : _a.length) {
            obj.slots = message.slots.map((e) => exports.TokenClassValue.toJSON(e));
        }
        if (message.domainStr !== "") {
            obj.domainStr = message.domainStr;
        }
        if (message.domain !== undefined) {
            obj.domain = exports.Classification.toJSON(message.domain);
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.AnalyzeIntentResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAnalyzeIntentResponse();
        message.intent = (object.intent !== undefined && object.intent !== null)
            ? exports.Classification.fromPartial(object.intent)
            : undefined;
        message.slots = ((_a = object.slots) === null || _a === void 0 ? void 0 : _a.map((e) => exports.TokenClassValue.fromPartial(e))) || [];
        message.domainStr = (_b = object.domainStr) !== null && _b !== void 0 ? _b : "";
        message.domain = (object.domain !== undefined && object.domain !== null)
            ? exports.Classification.fromPartial(object.domain)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseAnalyzeEntitiesOptions() {
    return { lang: "" };
}
exports.AnalyzeEntitiesOptions = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lang !== "") {
            writer.uint32(34).string(message.lang);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAnalyzeEntitiesOptions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.lang = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { lang: isSet(object.lang) ? globalThis.String(object.lang) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.lang !== "") {
            obj.lang = message.lang;
        }
        return obj;
    },
    create(base) {
        return exports.AnalyzeEntitiesOptions.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAnalyzeEntitiesOptions();
        message.lang = (_a = object.lang) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseAnalyzeEntitiesRequest() {
    return { query: "", options: undefined, id: undefined };
}
exports.AnalyzeEntitiesRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== "") {
            writer.uint32(10).string(message.query);
        }
        if (message.options !== undefined) {
            exports.AnalyzeEntitiesOptions.encode(message.options, writer.uint32(18).fork()).join();
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAnalyzeEntitiesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.options = exports.AnalyzeEntitiesOptions.decode(reader, reader.uint32());
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? globalThis.String(object.query) : "",
            options: isSet(object.options) ? exports.AnalyzeEntitiesOptions.fromJSON(object.options) : undefined,
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== "") {
            obj.query = message.query;
        }
        if (message.options !== undefined) {
            obj.options = exports.AnalyzeEntitiesOptions.toJSON(message.options);
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.AnalyzeEntitiesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseAnalyzeEntitiesRequest();
        message.query = (_a = object.query) !== null && _a !== void 0 ? _a : "";
        message.options = (object.options !== undefined && object.options !== null)
            ? exports.AnalyzeEntitiesOptions.fromPartial(object.options)
            : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseNaturalQueryRequest() {
    return { query: "", topN: 0, context: "", id: undefined };
}
exports.NaturalQueryRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.query !== "") {
            writer.uint32(10).string(message.query);
        }
        if (message.topN !== 0) {
            writer.uint32(16).uint32(message.topN);
        }
        if (message.context !== "") {
            writer.uint32(26).string(message.context);
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNaturalQueryRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.query = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.topN = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.context = reader.string();
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            query: isSet(object.query) ? globalThis.String(object.query) : "",
            topN: isSet(object.topN) ? globalThis.Number(object.topN) : 0,
            context: isSet(object.context) ? globalThis.String(object.context) : "",
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.query !== "") {
            obj.query = message.query;
        }
        if (message.topN !== 0) {
            obj.topN = Math.round(message.topN);
        }
        if (message.context !== "") {
            obj.context = message.context;
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.NaturalQueryRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseNaturalQueryRequest();
        message.query = (_a = object.query) !== null && _a !== void 0 ? _a : "";
        message.topN = (_b = object.topN) !== null && _b !== void 0 ? _b : 0;
        message.context = (_c = object.context) !== null && _c !== void 0 ? _c : "";
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseNaturalQueryResult() {
    return { answer: "", score: 0 };
}
exports.NaturalQueryResult = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.answer !== "") {
            writer.uint32(10).string(message.answer);
        }
        if (message.score !== 0) {
            writer.uint32(21).float(message.score);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNaturalQueryResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.answer = reader.string();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.score = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            answer: isSet(object.answer) ? globalThis.String(object.answer) : "",
            score: isSet(object.score) ? globalThis.Number(object.score) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.answer !== "") {
            obj.answer = message.answer;
        }
        if (message.score !== 0) {
            obj.score = message.score;
        }
        return obj;
    },
    create(base) {
        return exports.NaturalQueryResult.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseNaturalQueryResult();
        message.answer = (_a = object.answer) !== null && _a !== void 0 ? _a : "";
        message.score = (_b = object.score) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseNaturalQueryResponse() {
    return { results: [], id: undefined };
}
exports.NaturalQueryResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.results) {
            exports.NaturalQueryResult.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNaturalQueryResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.results.push(exports.NaturalQueryResult.decode(reader, reader.uint32()));
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            results: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.results)
                ? object.results.map((e) => exports.NaturalQueryResult.fromJSON(e))
                : [],
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.results) === null || _a === void 0 ? void 0 : _a.length) {
            obj.results = message.results.map((e) => exports.NaturalQueryResult.toJSON(e));
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.NaturalQueryResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseNaturalQueryResponse();
        message.results = ((_a = object.results) === null || _a === void 0 ? void 0 : _a.map((e) => exports.NaturalQueryResult.fromPartial(e))) || [];
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
exports.RivaLanguageUnderstandingService = {
    /**
     * ClassifyText takes as input an input/query string and parameters related
     * to the requested model to use to evaluate the text. The service evaluates
     * the text with the requested model, and returns one or more classifications.
     *
     * @deprecated
     */
    classifyText: {
        path: "/nvidia.riva.nlp.RivaLanguageUnderstanding/ClassifyText",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.TextClassRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.TextClassRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.TextClassResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.TextClassResponse.decode(value),
    },
    /**
     * ClassifyTokens takes as input either a string or list of tokens and
     * parameters related to which model to use. The service evaluates the text
     * with the requested model, performing additional tokenization if necessary,
     * and returns one or more class labels per token.
     *
     * @deprecated
     */
    classifyTokens: {
        path: "/nvidia.riva.nlp.RivaLanguageUnderstanding/ClassifyTokens",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.TokenClassRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.TokenClassRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.TokenClassResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.TokenClassResponse.decode(value),
    },
    /**
     * TransformText takes an input/query string and parameters related to the
     * requested model and returns another string. The behavior of the function
     * is defined entirely by the underlying model and may be used for
     * tasks like translation, adding punctuation, augment the input directly,
     * etc.
     */
    transformText: {
        path: "/nvidia.riva.nlp.RivaLanguageUnderstanding/TransformText",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.TextTransformRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.TextTransformRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.TextTransformResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.TextTransformResponse.decode(value),
    },
    /**
     * AnalyzeEntities accepts an input string and returns all named entities
     * within the text, as well as a category and likelihood.
     *
     * @deprecated
     */
    analyzeEntities: {
        path: "/nvidia.riva.nlp.RivaLanguageUnderstanding/AnalyzeEntities",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.AnalyzeEntitiesRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.AnalyzeEntitiesRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.TokenClassResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.TokenClassResponse.decode(value),
    },
    /**
     * AnalyzeIntent accepts an input string and returns the most likely
     * intent as well as slots relevant to that intent.
     *
     * The model requires that a valid "domain" be passed in, and optionally
     * supports including a previous intent classification result to provide
     * context for the model.
     *
     * @deprecated
     */
    analyzeIntent: {
        path: "/nvidia.riva.nlp.RivaLanguageUnderstanding/AnalyzeIntent",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.AnalyzeIntentRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.AnalyzeIntentRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.AnalyzeIntentResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.AnalyzeIntentResponse.decode(value),
    },
    /**
     * PunctuateText takes text with no- or limited- punctuation and returns
     * the same text with corrected punctuation and capitalization.
     */
    punctuateText: {
        path: "/nvidia.riva.nlp.RivaLanguageUnderstanding/PunctuateText",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.TextTransformRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.TextTransformRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.TextTransformResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.TextTransformResponse.decode(value),
    },
    /**
     * NaturalQuery is a search function that enables querying one or more
     * documents or contexts with a query that is written in natural language.
     *
     * @deprecated
     */
    naturalQuery: {
        path: "/nvidia.riva.nlp.RivaLanguageUnderstanding/NaturalQuery",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.NaturalQueryRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.NaturalQueryRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.NaturalQueryResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.NaturalQueryResponse.decode(value),
    },
    /**
     * Enables clients to request the configuration of the current ASR service, or
     * a specific model within the service.
     */
    getRivaNlpConfig: {
        path: "/nvidia.riva.nlp.RivaLanguageUnderstanding/GetRivaNLPConfig",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.RivaNLPConfigRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.RivaNLPConfigRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.RivaNLPConfigResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.RivaNLPConfigResponse.decode(value),
    },
};
exports.RivaLanguageUnderstandingClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.RivaLanguageUnderstandingService, "nvidia.riva.nlp.RivaLanguageUnderstanding");
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
