"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.28.0
// source: riva/proto/riva_asr.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.RivaSpeechRecognitionClient = exports.RivaSpeechRecognitionService = exports.StreamingRecognitionResult = exports.StreamingRecognizeResponse = exports.WordInfo = exports.SpeechRecognitionAlternative = exports.SpeechRecognitionResult = exports.RecognizeResponse = exports.SpeechContext = exports.SpeakerDiarizationConfig = exports.StreamingRecognitionConfig = exports.RecognitionConfig_CustomConfigurationEntry = exports.RecognitionConfig = exports.EndpointingConfig = exports.StreamingRecognizeRequest = exports.RecognizeRequest = exports.RivaSpeechRecognitionConfigResponse_Config_ParametersEntry = exports.RivaSpeechRecognitionConfigResponse_Config = exports.RivaSpeechRecognitionConfigResponse = exports.RivaSpeechRecognitionConfigRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const grpc_js_1 = require("@grpc/grpc-js");
const riva_audio_1 = require("./riva_audio");
const riva_common_1 = require("./riva_common");
exports.protobufPackage = "nvidia.riva.asr";
function createBaseRivaSpeechRecognitionConfigRequest() {
    return { modelName: "" };
}
exports.RivaSpeechRecognitionConfigRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.modelName !== "") {
            writer.uint32(10).string(message.modelName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRivaSpeechRecognitionConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.modelName = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.modelName !== "") {
            obj.modelName = message.modelName;
        }
        return obj;
    },
    create(base) {
        return exports.RivaSpeechRecognitionConfigRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRivaSpeechRecognitionConfigRequest();
        message.modelName = (_a = object.modelName) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseRivaSpeechRecognitionConfigResponse() {
    return { modelConfig: [] };
}
exports.RivaSpeechRecognitionConfigResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.modelConfig) {
            exports.RivaSpeechRecognitionConfigResponse_Config.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRivaSpeechRecognitionConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.modelConfig.push(exports.RivaSpeechRecognitionConfigResponse_Config.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            modelConfig: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.modelConfig)
                ? object.modelConfig.map((e) => exports.RivaSpeechRecognitionConfigResponse_Config.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.modelConfig) === null || _a === void 0 ? void 0 : _a.length) {
            obj.modelConfig = message.modelConfig.map((e) => exports.RivaSpeechRecognitionConfigResponse_Config.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.RivaSpeechRecognitionConfigResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRivaSpeechRecognitionConfigResponse();
        message.modelConfig = ((_a = object.modelConfig) === null || _a === void 0 ? void 0 : _a.map((e) => exports.RivaSpeechRecognitionConfigResponse_Config.fromPartial(e))) ||
            [];
        return message;
    },
};
function createBaseRivaSpeechRecognitionConfigResponse_Config() {
    return { modelName: "", parameters: {} };
}
exports.RivaSpeechRecognitionConfigResponse_Config = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.modelName !== "") {
            writer.uint32(10).string(message.modelName);
        }
        Object.entries(message.parameters).forEach(([key, value]) => {
            exports.RivaSpeechRecognitionConfigResponse_Config_ParametersEntry.encode({ key: key, value }, writer.uint32(18).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRivaSpeechRecognitionConfigResponse_Config();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.modelName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.RivaSpeechRecognitionConfigResponse_Config_ParametersEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.parameters[entry2.key] = entry2.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            modelName: isSet(object.modelName) ? globalThis.String(object.modelName) : "",
            parameters: isObject(object.parameters)
                ? Object.entries(object.parameters).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.modelName !== "") {
            obj.modelName = message.modelName;
        }
        if (message.parameters) {
            const entries = Object.entries(message.parameters);
            if (entries.length > 0) {
                obj.parameters = {};
                entries.forEach(([k, v]) => {
                    obj.parameters[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.RivaSpeechRecognitionConfigResponse_Config.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRivaSpeechRecognitionConfigResponse_Config();
        message.modelName = (_a = object.modelName) !== null && _a !== void 0 ? _a : "";
        message.parameters = Object.entries((_b = object.parameters) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseRivaSpeechRecognitionConfigResponse_Config_ParametersEntry() {
    return { key: "", value: "" };
}
exports.RivaSpeechRecognitionConfigResponse_Config_ParametersEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRivaSpeechRecognitionConfigResponse_Config_ParametersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.RivaSpeechRecognitionConfigResponse_Config_ParametersEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRivaSpeechRecognitionConfigResponse_Config_ParametersEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRecognizeRequest() {
    return { config: undefined, audio: new Uint8Array(0), id: undefined };
}
exports.RecognizeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.config !== undefined) {
            exports.RecognitionConfig.encode(message.config, writer.uint32(10).fork()).join();
        }
        if (message.audio.length !== 0) {
            writer.uint32(18).bytes(message.audio);
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRecognizeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.config = exports.RecognitionConfig.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.audio = reader.bytes();
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            config: isSet(object.config) ? exports.RecognitionConfig.fromJSON(object.config) : undefined,
            audio: isSet(object.audio) ? bytesFromBase64(object.audio) : new Uint8Array(0),
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.config !== undefined) {
            obj.config = exports.RecognitionConfig.toJSON(message.config);
        }
        if (message.audio.length !== 0) {
            obj.audio = base64FromBytes(message.audio);
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.RecognizeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRecognizeRequest();
        message.config = (object.config !== undefined && object.config !== null)
            ? exports.RecognitionConfig.fromPartial(object.config)
            : undefined;
        message.audio = (_a = object.audio) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseStreamingRecognizeRequest() {
    return { streamingConfig: undefined, audioContent: undefined, id: undefined };
}
exports.StreamingRecognizeRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.streamingConfig !== undefined) {
            exports.StreamingRecognitionConfig.encode(message.streamingConfig, writer.uint32(10).fork()).join();
        }
        if (message.audioContent !== undefined) {
            writer.uint32(18).bytes(message.audioContent);
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamingRecognizeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.streamingConfig = exports.StreamingRecognitionConfig.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.audioContent = reader.bytes();
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            streamingConfig: isSet(object.streamingConfig)
                ? exports.StreamingRecognitionConfig.fromJSON(object.streamingConfig)
                : undefined,
            audioContent: isSet(object.audioContent) ? bytesFromBase64(object.audioContent) : undefined,
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.streamingConfig !== undefined) {
            obj.streamingConfig = exports.StreamingRecognitionConfig.toJSON(message.streamingConfig);
        }
        if (message.audioContent !== undefined) {
            obj.audioContent = base64FromBytes(message.audioContent);
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.StreamingRecognizeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseStreamingRecognizeRequest();
        message.streamingConfig = (object.streamingConfig !== undefined && object.streamingConfig !== null)
            ? exports.StreamingRecognitionConfig.fromPartial(object.streamingConfig)
            : undefined;
        message.audioContent = (_a = object.audioContent) !== null && _a !== void 0 ? _a : undefined;
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseEndpointingConfig() {
    return {
        startHistory: undefined,
        startThreshold: undefined,
        stopHistory: undefined,
        stopThreshold: undefined,
        stopHistoryEou: undefined,
        stopThresholdEou: undefined,
    };
}
exports.EndpointingConfig = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.startHistory !== undefined) {
            writer.uint32(8).int32(message.startHistory);
        }
        if (message.startThreshold !== undefined) {
            writer.uint32(21).float(message.startThreshold);
        }
        if (message.stopHistory !== undefined) {
            writer.uint32(24).int32(message.stopHistory);
        }
        if (message.stopThreshold !== undefined) {
            writer.uint32(37).float(message.stopThreshold);
        }
        if (message.stopHistoryEou !== undefined) {
            writer.uint32(40).int32(message.stopHistoryEou);
        }
        if (message.stopThresholdEou !== undefined) {
            writer.uint32(53).float(message.stopThresholdEou);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEndpointingConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.startHistory = reader.int32();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.startThreshold = reader.float();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.stopHistory = reader.int32();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.stopThreshold = reader.float();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.stopHistoryEou = reader.int32();
                    continue;
                case 6:
                    if (tag !== 53) {
                        break;
                    }
                    message.stopThresholdEou = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            startHistory: isSet(object.startHistory) ? globalThis.Number(object.startHistory) : undefined,
            startThreshold: isSet(object.startThreshold) ? globalThis.Number(object.startThreshold) : undefined,
            stopHistory: isSet(object.stopHistory) ? globalThis.Number(object.stopHistory) : undefined,
            stopThreshold: isSet(object.stopThreshold) ? globalThis.Number(object.stopThreshold) : undefined,
            stopHistoryEou: isSet(object.stopHistoryEou) ? globalThis.Number(object.stopHistoryEou) : undefined,
            stopThresholdEou: isSet(object.stopThresholdEou) ? globalThis.Number(object.stopThresholdEou) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.startHistory !== undefined) {
            obj.startHistory = Math.round(message.startHistory);
        }
        if (message.startThreshold !== undefined) {
            obj.startThreshold = message.startThreshold;
        }
        if (message.stopHistory !== undefined) {
            obj.stopHistory = Math.round(message.stopHistory);
        }
        if (message.stopThreshold !== undefined) {
            obj.stopThreshold = message.stopThreshold;
        }
        if (message.stopHistoryEou !== undefined) {
            obj.stopHistoryEou = Math.round(message.stopHistoryEou);
        }
        if (message.stopThresholdEou !== undefined) {
            obj.stopThresholdEou = message.stopThresholdEou;
        }
        return obj;
    },
    create(base) {
        return exports.EndpointingConfig.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseEndpointingConfig();
        message.startHistory = (_a = object.startHistory) !== null && _a !== void 0 ? _a : undefined;
        message.startThreshold = (_b = object.startThreshold) !== null && _b !== void 0 ? _b : undefined;
        message.stopHistory = (_c = object.stopHistory) !== null && _c !== void 0 ? _c : undefined;
        message.stopThreshold = (_d = object.stopThreshold) !== null && _d !== void 0 ? _d : undefined;
        message.stopHistoryEou = (_e = object.stopHistoryEou) !== null && _e !== void 0 ? _e : undefined;
        message.stopThresholdEou = (_f = object.stopThresholdEou) !== null && _f !== void 0 ? _f : undefined;
        return message;
    },
};
function createBaseRecognitionConfig() {
    return {
        encoding: 0,
        sampleRateHertz: 0,
        languageCode: "",
        maxAlternatives: 0,
        profanityFilter: false,
        speechContexts: [],
        audioChannelCount: 0,
        enableWordTimeOffsets: false,
        enableAutomaticPunctuation: false,
        enableSeparateRecognitionPerChannel: false,
        model: "",
        verbatimTranscripts: false,
        diarizationConfig: undefined,
        customConfiguration: {},
        endpointingConfig: undefined,
    };
}
exports.RecognitionConfig = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.encoding !== 0) {
            writer.uint32(8).int32(message.encoding);
        }
        if (message.sampleRateHertz !== 0) {
            writer.uint32(16).int32(message.sampleRateHertz);
        }
        if (message.languageCode !== "") {
            writer.uint32(26).string(message.languageCode);
        }
        if (message.maxAlternatives !== 0) {
            writer.uint32(32).int32(message.maxAlternatives);
        }
        if (message.profanityFilter !== false) {
            writer.uint32(40).bool(message.profanityFilter);
        }
        for (const v of message.speechContexts) {
            exports.SpeechContext.encode(v, writer.uint32(50).fork()).join();
        }
        if (message.audioChannelCount !== 0) {
            writer.uint32(56).int32(message.audioChannelCount);
        }
        if (message.enableWordTimeOffsets !== false) {
            writer.uint32(64).bool(message.enableWordTimeOffsets);
        }
        if (message.enableAutomaticPunctuation !== false) {
            writer.uint32(88).bool(message.enableAutomaticPunctuation);
        }
        if (message.enableSeparateRecognitionPerChannel !== false) {
            writer.uint32(96).bool(message.enableSeparateRecognitionPerChannel);
        }
        if (message.model !== "") {
            writer.uint32(106).string(message.model);
        }
        if (message.verbatimTranscripts !== false) {
            writer.uint32(112).bool(message.verbatimTranscripts);
        }
        if (message.diarizationConfig !== undefined) {
            exports.SpeakerDiarizationConfig.encode(message.diarizationConfig, writer.uint32(154).fork()).join();
        }
        Object.entries(message.customConfiguration).forEach(([key, value]) => {
            exports.RecognitionConfig_CustomConfigurationEntry.encode({ key: key, value }, writer.uint32(194).fork()).join();
        });
        if (message.endpointingConfig !== undefined) {
            exports.EndpointingConfig.encode(message.endpointingConfig, writer.uint32(202).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRecognitionConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.encoding = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.sampleRateHertz = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.languageCode = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.maxAlternatives = reader.int32();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.profanityFilter = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.speechContexts.push(exports.SpeechContext.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.audioChannelCount = reader.int32();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.enableWordTimeOffsets = reader.bool();
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.enableAutomaticPunctuation = reader.bool();
                    continue;
                case 12:
                    if (tag !== 96) {
                        break;
                    }
                    message.enableSeparateRecognitionPerChannel = reader.bool();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.model = reader.string();
                    continue;
                case 14:
                    if (tag !== 112) {
                        break;
                    }
                    message.verbatimTranscripts = reader.bool();
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.diarizationConfig = exports.SpeakerDiarizationConfig.decode(reader, reader.uint32());
                    continue;
                case 24:
                    if (tag !== 194) {
                        break;
                    }
                    const entry24 = exports.RecognitionConfig_CustomConfigurationEntry.decode(reader, reader.uint32());
                    if (entry24.value !== undefined) {
                        message.customConfiguration[entry24.key] = entry24.value;
                    }
                    continue;
                case 25:
                    if (tag !== 202) {
                        break;
                    }
                    message.endpointingConfig = exports.EndpointingConfig.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            encoding: isSet(object.encoding) ? (0, riva_audio_1.audioEncodingFromJSON)(object.encoding) : 0,
            sampleRateHertz: isSet(object.sampleRateHertz) ? globalThis.Number(object.sampleRateHertz) : 0,
            languageCode: isSet(object.languageCode) ? globalThis.String(object.languageCode) : "",
            maxAlternatives: isSet(object.maxAlternatives) ? globalThis.Number(object.maxAlternatives) : 0,
            profanityFilter: isSet(object.profanityFilter) ? globalThis.Boolean(object.profanityFilter) : false,
            speechContexts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.speechContexts)
                ? object.speechContexts.map((e) => exports.SpeechContext.fromJSON(e))
                : [],
            audioChannelCount: isSet(object.audioChannelCount) ? globalThis.Number(object.audioChannelCount) : 0,
            enableWordTimeOffsets: isSet(object.enableWordTimeOffsets)
                ? globalThis.Boolean(object.enableWordTimeOffsets)
                : false,
            enableAutomaticPunctuation: isSet(object.enableAutomaticPunctuation)
                ? globalThis.Boolean(object.enableAutomaticPunctuation)
                : false,
            enableSeparateRecognitionPerChannel: isSet(object.enableSeparateRecognitionPerChannel)
                ? globalThis.Boolean(object.enableSeparateRecognitionPerChannel)
                : false,
            model: isSet(object.model) ? globalThis.String(object.model) : "",
            verbatimTranscripts: isSet(object.verbatimTranscripts) ? globalThis.Boolean(object.verbatimTranscripts) : false,
            diarizationConfig: isSet(object.diarizationConfig)
                ? exports.SpeakerDiarizationConfig.fromJSON(object.diarizationConfig)
                : undefined,
            customConfiguration: isObject(object.customConfiguration)
                ? Object.entries(object.customConfiguration).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            endpointingConfig: isSet(object.endpointingConfig)
                ? exports.EndpointingConfig.fromJSON(object.endpointingConfig)
                : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.encoding !== 0) {
            obj.encoding = (0, riva_audio_1.audioEncodingToJSON)(message.encoding);
        }
        if (message.sampleRateHertz !== 0) {
            obj.sampleRateHertz = Math.round(message.sampleRateHertz);
        }
        if (message.languageCode !== "") {
            obj.languageCode = message.languageCode;
        }
        if (message.maxAlternatives !== 0) {
            obj.maxAlternatives = Math.round(message.maxAlternatives);
        }
        if (message.profanityFilter !== false) {
            obj.profanityFilter = message.profanityFilter;
        }
        if ((_a = message.speechContexts) === null || _a === void 0 ? void 0 : _a.length) {
            obj.speechContexts = message.speechContexts.map((e) => exports.SpeechContext.toJSON(e));
        }
        if (message.audioChannelCount !== 0) {
            obj.audioChannelCount = Math.round(message.audioChannelCount);
        }
        if (message.enableWordTimeOffsets !== false) {
            obj.enableWordTimeOffsets = message.enableWordTimeOffsets;
        }
        if (message.enableAutomaticPunctuation !== false) {
            obj.enableAutomaticPunctuation = message.enableAutomaticPunctuation;
        }
        if (message.enableSeparateRecognitionPerChannel !== false) {
            obj.enableSeparateRecognitionPerChannel = message.enableSeparateRecognitionPerChannel;
        }
        if (message.model !== "") {
            obj.model = message.model;
        }
        if (message.verbatimTranscripts !== false) {
            obj.verbatimTranscripts = message.verbatimTranscripts;
        }
        if (message.diarizationConfig !== undefined) {
            obj.diarizationConfig = exports.SpeakerDiarizationConfig.toJSON(message.diarizationConfig);
        }
        if (message.customConfiguration) {
            const entries = Object.entries(message.customConfiguration);
            if (entries.length > 0) {
                obj.customConfiguration = {};
                entries.forEach(([k, v]) => {
                    obj.customConfiguration[k] = v;
                });
            }
        }
        if (message.endpointingConfig !== undefined) {
            obj.endpointingConfig = exports.EndpointingConfig.toJSON(message.endpointingConfig);
        }
        return obj;
    },
    create(base) {
        return exports.RecognitionConfig.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseRecognitionConfig();
        message.encoding = (_a = object.encoding) !== null && _a !== void 0 ? _a : 0;
        message.sampleRateHertz = (_b = object.sampleRateHertz) !== null && _b !== void 0 ? _b : 0;
        message.languageCode = (_c = object.languageCode) !== null && _c !== void 0 ? _c : "";
        message.maxAlternatives = (_d = object.maxAlternatives) !== null && _d !== void 0 ? _d : 0;
        message.profanityFilter = (_e = object.profanityFilter) !== null && _e !== void 0 ? _e : false;
        message.speechContexts = ((_f = object.speechContexts) === null || _f === void 0 ? void 0 : _f.map((e) => exports.SpeechContext.fromPartial(e))) || [];
        message.audioChannelCount = (_g = object.audioChannelCount) !== null && _g !== void 0 ? _g : 0;
        message.enableWordTimeOffsets = (_h = object.enableWordTimeOffsets) !== null && _h !== void 0 ? _h : false;
        message.enableAutomaticPunctuation = (_j = object.enableAutomaticPunctuation) !== null && _j !== void 0 ? _j : false;
        message.enableSeparateRecognitionPerChannel = (_k = object.enableSeparateRecognitionPerChannel) !== null && _k !== void 0 ? _k : false;
        message.model = (_l = object.model) !== null && _l !== void 0 ? _l : "";
        message.verbatimTranscripts = (_m = object.verbatimTranscripts) !== null && _m !== void 0 ? _m : false;
        message.diarizationConfig = (object.diarizationConfig !== undefined && object.diarizationConfig !== null)
            ? exports.SpeakerDiarizationConfig.fromPartial(object.diarizationConfig)
            : undefined;
        message.customConfiguration = Object.entries((_o = object.customConfiguration) !== null && _o !== void 0 ? _o : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        message.endpointingConfig = (object.endpointingConfig !== undefined && object.endpointingConfig !== null)
            ? exports.EndpointingConfig.fromPartial(object.endpointingConfig)
            : undefined;
        return message;
    },
};
function createBaseRecognitionConfig_CustomConfigurationEntry() {
    return { key: "", value: "" };
}
exports.RecognitionConfig_CustomConfigurationEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRecognitionConfig_CustomConfigurationEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.RecognitionConfig_CustomConfigurationEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRecognitionConfig_CustomConfigurationEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseStreamingRecognitionConfig() {
    return { config: undefined, interimResults: false };
}
exports.StreamingRecognitionConfig = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.config !== undefined) {
            exports.RecognitionConfig.encode(message.config, writer.uint32(10).fork()).join();
        }
        if (message.interimResults !== false) {
            writer.uint32(16).bool(message.interimResults);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamingRecognitionConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.config = exports.RecognitionConfig.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.interimResults = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            config: isSet(object.config) ? exports.RecognitionConfig.fromJSON(object.config) : undefined,
            interimResults: isSet(object.interimResults) ? globalThis.Boolean(object.interimResults) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.config !== undefined) {
            obj.config = exports.RecognitionConfig.toJSON(message.config);
        }
        if (message.interimResults !== false) {
            obj.interimResults = message.interimResults;
        }
        return obj;
    },
    create(base) {
        return exports.StreamingRecognitionConfig.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseStreamingRecognitionConfig();
        message.config = (object.config !== undefined && object.config !== null)
            ? exports.RecognitionConfig.fromPartial(object.config)
            : undefined;
        message.interimResults = (_a = object.interimResults) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseSpeakerDiarizationConfig() {
    return { enableSpeakerDiarization: false, maxSpeakerCount: 0 };
}
exports.SpeakerDiarizationConfig = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.enableSpeakerDiarization !== false) {
            writer.uint32(8).bool(message.enableSpeakerDiarization);
        }
        if (message.maxSpeakerCount !== 0) {
            writer.uint32(16).int32(message.maxSpeakerCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSpeakerDiarizationConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.enableSpeakerDiarization = reader.bool();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.maxSpeakerCount = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            enableSpeakerDiarization: isSet(object.enableSpeakerDiarization)
                ? globalThis.Boolean(object.enableSpeakerDiarization)
                : false,
            maxSpeakerCount: isSet(object.maxSpeakerCount) ? globalThis.Number(object.maxSpeakerCount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.enableSpeakerDiarization !== false) {
            obj.enableSpeakerDiarization = message.enableSpeakerDiarization;
        }
        if (message.maxSpeakerCount !== 0) {
            obj.maxSpeakerCount = Math.round(message.maxSpeakerCount);
        }
        return obj;
    },
    create(base) {
        return exports.SpeakerDiarizationConfig.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSpeakerDiarizationConfig();
        message.enableSpeakerDiarization = (_a = object.enableSpeakerDiarization) !== null && _a !== void 0 ? _a : false;
        message.maxSpeakerCount = (_b = object.maxSpeakerCount) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseSpeechContext() {
    return { phrases: [], boost: 0 };
}
exports.SpeechContext = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.phrases) {
            writer.uint32(10).string(v);
        }
        if (message.boost !== 0) {
            writer.uint32(37).float(message.boost);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSpeechContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.phrases.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.boost = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            phrases: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.phrases) ? object.phrases.map((e) => globalThis.String(e)) : [],
            boost: isSet(object.boost) ? globalThis.Number(object.boost) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.phrases) === null || _a === void 0 ? void 0 : _a.length) {
            obj.phrases = message.phrases;
        }
        if (message.boost !== 0) {
            obj.boost = message.boost;
        }
        return obj;
    },
    create(base) {
        return exports.SpeechContext.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSpeechContext();
        message.phrases = ((_a = object.phrases) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.boost = (_b = object.boost) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseRecognizeResponse() {
    return { results: [], id: undefined };
}
exports.RecognizeResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.results) {
            exports.SpeechRecognitionResult.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRecognizeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.results.push(exports.SpeechRecognitionResult.decode(reader, reader.uint32()));
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            results: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.results)
                ? object.results.map((e) => exports.SpeechRecognitionResult.fromJSON(e))
                : [],
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.results) === null || _a === void 0 ? void 0 : _a.length) {
            obj.results = message.results.map((e) => exports.SpeechRecognitionResult.toJSON(e));
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.RecognizeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRecognizeResponse();
        message.results = ((_a = object.results) === null || _a === void 0 ? void 0 : _a.map((e) => exports.SpeechRecognitionResult.fromPartial(e))) || [];
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseSpeechRecognitionResult() {
    return { alternatives: [], channelTag: 0, audioProcessed: 0 };
}
exports.SpeechRecognitionResult = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.alternatives) {
            exports.SpeechRecognitionAlternative.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.channelTag !== 0) {
            writer.uint32(16).int32(message.channelTag);
        }
        if (message.audioProcessed !== 0) {
            writer.uint32(29).float(message.audioProcessed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSpeechRecognitionResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.alternatives.push(exports.SpeechRecognitionAlternative.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.channelTag = reader.int32();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.audioProcessed = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alternatives: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.alternatives)
                ? object.alternatives.map((e) => exports.SpeechRecognitionAlternative.fromJSON(e))
                : [],
            channelTag: isSet(object.channelTag) ? globalThis.Number(object.channelTag) : 0,
            audioProcessed: isSet(object.audioProcessed) ? globalThis.Number(object.audioProcessed) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.alternatives) === null || _a === void 0 ? void 0 : _a.length) {
            obj.alternatives = message.alternatives.map((e) => exports.SpeechRecognitionAlternative.toJSON(e));
        }
        if (message.channelTag !== 0) {
            obj.channelTag = Math.round(message.channelTag);
        }
        if (message.audioProcessed !== 0) {
            obj.audioProcessed = message.audioProcessed;
        }
        return obj;
    },
    create(base) {
        return exports.SpeechRecognitionResult.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSpeechRecognitionResult();
        message.alternatives = ((_a = object.alternatives) === null || _a === void 0 ? void 0 : _a.map((e) => exports.SpeechRecognitionAlternative.fromPartial(e))) || [];
        message.channelTag = (_b = object.channelTag) !== null && _b !== void 0 ? _b : 0;
        message.audioProcessed = (_c = object.audioProcessed) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseSpeechRecognitionAlternative() {
    return { transcript: "", confidence: 0, words: [] };
}
exports.SpeechRecognitionAlternative = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.transcript !== "") {
            writer.uint32(10).string(message.transcript);
        }
        if (message.confidence !== 0) {
            writer.uint32(21).float(message.confidence);
        }
        for (const v of message.words) {
            exports.WordInfo.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSpeechRecognitionAlternative();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.transcript = reader.string();
                    continue;
                case 2:
                    if (tag !== 21) {
                        break;
                    }
                    message.confidence = reader.float();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.words.push(exports.WordInfo.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            transcript: isSet(object.transcript) ? globalThis.String(object.transcript) : "",
            confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
            words: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.words) ? object.words.map((e) => exports.WordInfo.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.transcript !== "") {
            obj.transcript = message.transcript;
        }
        if (message.confidence !== 0) {
            obj.confidence = message.confidence;
        }
        if ((_a = message.words) === null || _a === void 0 ? void 0 : _a.length) {
            obj.words = message.words.map((e) => exports.WordInfo.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.SpeechRecognitionAlternative.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSpeechRecognitionAlternative();
        message.transcript = (_a = object.transcript) !== null && _a !== void 0 ? _a : "";
        message.confidence = (_b = object.confidence) !== null && _b !== void 0 ? _b : 0;
        message.words = ((_c = object.words) === null || _c === void 0 ? void 0 : _c.map((e) => exports.WordInfo.fromPartial(e))) || [];
        return message;
    },
};
function createBaseWordInfo() {
    return { startTime: 0, endTime: 0, word: "", confidence: 0, speakerTag: 0 };
}
exports.WordInfo = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.startTime !== 0) {
            writer.uint32(8).int32(message.startTime);
        }
        if (message.endTime !== 0) {
            writer.uint32(16).int32(message.endTime);
        }
        if (message.word !== "") {
            writer.uint32(26).string(message.word);
        }
        if (message.confidence !== 0) {
            writer.uint32(37).float(message.confidence);
        }
        if (message.speakerTag !== 0) {
            writer.uint32(40).int32(message.speakerTag);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWordInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.startTime = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.endTime = reader.int32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.word = reader.string();
                    continue;
                case 4:
                    if (tag !== 37) {
                        break;
                    }
                    message.confidence = reader.float();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.speakerTag = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            startTime: isSet(object.startTime) ? globalThis.Number(object.startTime) : 0,
            endTime: isSet(object.endTime) ? globalThis.Number(object.endTime) : 0,
            word: isSet(object.word) ? globalThis.String(object.word) : "",
            confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
            speakerTag: isSet(object.speakerTag) ? globalThis.Number(object.speakerTag) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.startTime !== 0) {
            obj.startTime = Math.round(message.startTime);
        }
        if (message.endTime !== 0) {
            obj.endTime = Math.round(message.endTime);
        }
        if (message.word !== "") {
            obj.word = message.word;
        }
        if (message.confidence !== 0) {
            obj.confidence = message.confidence;
        }
        if (message.speakerTag !== 0) {
            obj.speakerTag = Math.round(message.speakerTag);
        }
        return obj;
    },
    create(base) {
        return exports.WordInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseWordInfo();
        message.startTime = (_a = object.startTime) !== null && _a !== void 0 ? _a : 0;
        message.endTime = (_b = object.endTime) !== null && _b !== void 0 ? _b : 0;
        message.word = (_c = object.word) !== null && _c !== void 0 ? _c : "";
        message.confidence = (_d = object.confidence) !== null && _d !== void 0 ? _d : 0;
        message.speakerTag = (_e = object.speakerTag) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function createBaseStreamingRecognizeResponse() {
    return { results: [], id: undefined };
}
exports.StreamingRecognizeResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.results) {
            exports.StreamingRecognitionResult.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.id !== undefined) {
            riva_common_1.RequestId.encode(message.id, writer.uint32(802).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamingRecognizeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.results.push(exports.StreamingRecognitionResult.decode(reader, reader.uint32()));
                    continue;
                case 100:
                    if (tag !== 802) {
                        break;
                    }
                    message.id = riva_common_1.RequestId.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            results: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.results)
                ? object.results.map((e) => exports.StreamingRecognitionResult.fromJSON(e))
                : [],
            id: isSet(object.id) ? riva_common_1.RequestId.fromJSON(object.id) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.results) === null || _a === void 0 ? void 0 : _a.length) {
            obj.results = message.results.map((e) => exports.StreamingRecognitionResult.toJSON(e));
        }
        if (message.id !== undefined) {
            obj.id = riva_common_1.RequestId.toJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.StreamingRecognizeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseStreamingRecognizeResponse();
        message.results = ((_a = object.results) === null || _a === void 0 ? void 0 : _a.map((e) => exports.StreamingRecognitionResult.fromPartial(e))) || [];
        message.id = (object.id !== undefined && object.id !== null) ? riva_common_1.RequestId.fromPartial(object.id) : undefined;
        return message;
    },
};
function createBaseStreamingRecognitionResult() {
    return { alternatives: [], isFinal: false, stability: 0, channelTag: 0, audioProcessed: 0 };
}
exports.StreamingRecognitionResult = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.alternatives) {
            exports.SpeechRecognitionAlternative.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.isFinal !== false) {
            writer.uint32(16).bool(message.isFinal);
        }
        if (message.stability !== 0) {
            writer.uint32(29).float(message.stability);
        }
        if (message.channelTag !== 0) {
            writer.uint32(40).int32(message.channelTag);
        }
        if (message.audioProcessed !== 0) {
            writer.uint32(53).float(message.audioProcessed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseStreamingRecognitionResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.alternatives.push(exports.SpeechRecognitionAlternative.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.isFinal = reader.bool();
                    continue;
                case 3:
                    if (tag !== 29) {
                        break;
                    }
                    message.stability = reader.float();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.channelTag = reader.int32();
                    continue;
                case 6:
                    if (tag !== 53) {
                        break;
                    }
                    message.audioProcessed = reader.float();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            alternatives: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.alternatives)
                ? object.alternatives.map((e) => exports.SpeechRecognitionAlternative.fromJSON(e))
                : [],
            isFinal: isSet(object.isFinal) ? globalThis.Boolean(object.isFinal) : false,
            stability: isSet(object.stability) ? globalThis.Number(object.stability) : 0,
            channelTag: isSet(object.channelTag) ? globalThis.Number(object.channelTag) : 0,
            audioProcessed: isSet(object.audioProcessed) ? globalThis.Number(object.audioProcessed) : 0,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.alternatives) === null || _a === void 0 ? void 0 : _a.length) {
            obj.alternatives = message.alternatives.map((e) => exports.SpeechRecognitionAlternative.toJSON(e));
        }
        if (message.isFinal !== false) {
            obj.isFinal = message.isFinal;
        }
        if (message.stability !== 0) {
            obj.stability = message.stability;
        }
        if (message.channelTag !== 0) {
            obj.channelTag = Math.round(message.channelTag);
        }
        if (message.audioProcessed !== 0) {
            obj.audioProcessed = message.audioProcessed;
        }
        return obj;
    },
    create(base) {
        return exports.StreamingRecognitionResult.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseStreamingRecognitionResult();
        message.alternatives = ((_a = object.alternatives) === null || _a === void 0 ? void 0 : _a.map((e) => exports.SpeechRecognitionAlternative.fromPartial(e))) || [];
        message.isFinal = (_b = object.isFinal) !== null && _b !== void 0 ? _b : false;
        message.stability = (_c = object.stability) !== null && _c !== void 0 ? _c : 0;
        message.channelTag = (_d = object.channelTag) !== null && _d !== void 0 ? _d : 0;
        message.audioProcessed = (_e = object.audioProcessed) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
exports.RivaSpeechRecognitionService = {
    /**
     * Recognize expects a RecognizeRequest and returns a RecognizeResponse. This
     * request will block until the audio is uploaded, processed, and a transcript
     * is returned.
     */
    recognize: {
        path: "/nvidia.riva.asr.RivaSpeechRecognition/Recognize",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.RecognizeRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.RecognizeRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.RecognizeResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.RecognizeResponse.decode(value),
    },
    /**
     * StreamingRecognize is a non-blocking API call that allows audio data to be
     * fed to the server in chunks as it becomes available. Depending on the
     * configuration in the StreamingRecognizeRequest, intermediate results can be
     * sent back to the client. Recognition ends when the stream is closed by the
     * client.
     */
    streamingRecognize: {
        path: "/nvidia.riva.asr.RivaSpeechRecognition/StreamingRecognize",
        requestStream: true,
        responseStream: true,
        requestSerialize: (value) => Buffer.from(exports.StreamingRecognizeRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.StreamingRecognizeRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.StreamingRecognizeResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.StreamingRecognizeResponse.decode(value),
    },
    /**
     * Enables clients to request the configuration of the current ASR service, or
     * a specific model within the service.
     */
    getRivaSpeechRecognitionConfig: {
        path: "/nvidia.riva.asr.RivaSpeechRecognition/GetRivaSpeechRecognitionConfig",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(exports.RivaSpeechRecognitionConfigRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.RivaSpeechRecognitionConfigRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.RivaSpeechRecognitionConfigResponse.encode(value).finish()),
        responseDeserialize: (value) => exports.RivaSpeechRecognitionConfigResponse.decode(value),
    },
};
exports.RivaSpeechRecognitionClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.RivaSpeechRecognitionService, "nvidia.riva.asr.RivaSpeechRecognition");
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
